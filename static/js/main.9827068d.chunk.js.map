{"version":3,"sources":["features/map/mapSlice.js","features/map/Map.js","App.js","app/store.js","serviceWorker.js","index.js","features/map/Map.module.css"],"names":["mapSlice","createSlice","name","initialState","distance","averageElevation","maxElevation","Infinity","minElevation","reducers","setDistance","state","action","payload","setAverageElevation","setMaxElevation","setMinElevation","actions","selectDistance","map","selectAverageElevation","selectMaxElevation","selectMinElevation","libraries","Map","calculate_distance","React","useCallback","first_point","second_point","lon1","lon2","lat1","lat2","dlon","dlat","a","total_distance","pi","Math","PI","lng","lat","sin","cos","asin","sqrt","useState","pencil","setPencil","points","setPoints","mapCenter","setMapCenter","useSelector","dispatch","useDispatch","panTo","zoom","mapRef","current","setZoom","getZoom","onMapClick","event","latLng","useRef","onMapLoad","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","className","styles","logo","src","alt","appName","Search","Locate","toFixed","mapContainerStyle","width","height","center","options","disableDefaultUI","zoomControl","onClick","onLoad","icon","url","scaledSize","window","google","maps","Size","origin","Point","anchor","draggable","onDrag","point","elevation","ElevationService","getElevationForLocations","results","status","retrived_elevation","console","log","currentPoints","push","length","newDistance","newElevation","i","path","strokeOpacity","strokeColor","fillColor","locate","usePlacesAutocomplete","requestOptions","location","radius","ready","value","suggestions","data","setValue","clearSuggestions","search","onSelect","address","getGeocode","getLatLng","onChange","e","target","disabled","placeholder","id","description","key","App","configureStore","reducer","mapReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","serviceWorker","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9827068d.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const mapSlice = createSlice({\r\n  name: 'map',\r\n  initialState: {\r\n    distance: 0,\r\n    averageElevation: 0,\r\n    maxElevation: -Infinity,\r\n    minElevation: +Infinity,\r\n  },\r\n  reducers: {\r\n    setDistance: (state, action) => {\r\n      state.distance = action.payload;\r\n    },\r\n    setAverageElevation: (state, action) => {\r\n      state.averageElevation = action.payload;\r\n    },\r\n    setMaxElevation: (state, action) => {\r\n      state.maxElevation = action.payload;\r\n    },\r\n    setMinElevation: (state, action) => {\r\n      state.minElevation = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setDistance, setAverageElevation, setMaxElevation, setMinElevation } = mapSlice.actions;\r\n\r\nexport const selectDistance = state => state.map.distance;\r\nexport const selectAverageElevation = state => state.map.averageElevation;\r\nexport const selectMaxElevation = state => state.map.maxElevation;\r\nexport const selectMinElevation = state => state.map.minElevation;\r\n\r\nexport default mapSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setDistance, selectDistance, setAverageElevation, selectAverageElevation, setMaxElevation, selectMaxElevation, setMinElevation, selectMinElevation } from './mapSlice';\r\nimport { GoogleMap, useLoadScript, Marker, Polyline} from \"@react-google-maps/api\"; \r\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\r\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxOption, ComboboxList } from \"@reach/combobox\";\r\nimport \"@reach/combobox/styles.css\";\r\nimport styles from './Map.module.css';\r\n\r\nconst libraries = [\"places\"];\r\n\r\nexport function Map() {\r\n\r\n    // Function to calculate distance between 2 given points\r\n    const calculate_distance = React.useCallback((first_point, second_point) => {\r\n      var total_distance = 0;\r\n      var pi = Math.PI;\r\n      var lon1, lon2, lat1, lat2, dlon, dlat, a, c, r;\r\n      lon1 = (first_point).lng * (pi/180)\r\n      lon2 = (second_point).lng * (pi/180)\r\n      lat1 = (first_point ).lat * (pi/180)\r\n      lat2 = (second_point).lat * (pi/180)\r\n      dlon = lon2 - lon1  \r\n      dlat = lat2 - lat1 \r\n      a = Math.sin(dlat / 2)**2 + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlon / 2)**2\r\n      c = 2 * Math.asin(Math.sqrt(a))    \r\n      r = 6371\r\n      total_distance += c*r\r\n      return (total_distance);\r\n    }, []);\r\n\r\n    // Local States\r\n    const [pencil, setPencil] = useState(null);\r\n    const [points, setPoints] = useState([]);\r\n    const [mapCenter, setMapCenter] = useState({lat: 0, lng: 0});\r\n\r\n    // Redux state manaegment\r\n    const distance = useSelector(selectDistance);\r\n    const averageElevation = useSelector(selectAverageElevation);\r\n    const minElevation = useSelector(selectMinElevation);\r\n    const maxElevation = useSelector(selectMaxElevation);\r\n    const dispatch = useDispatch();\r\n\r\n    // Map Constants, Variables and Functions\r\n    const mapContainerStyle = {\r\n      width: '100vw',\r\n      height: \"100vh\",\r\n    };\r\n    const options = {\r\n      disableDefaultUI: true,\r\n      zoomControl: true,\r\n    }\r\n    const panTo = React.useCallback(({lat, lng, zoom}) => {\r\n      setMapCenter({lat, lng})\r\n      if (zoom === null) mapRef.current.setZoom(mapRef.current.getZoom());\r\n      else mapRef.current.setZoom(zoom);\r\n    }, []);\r\n    const onMapClick = React.useCallback((event) => {\r\n      setPencil({\r\n        lat: event.latLng.lat(),\r\n        lng: event.latLng.lng(),\r\n      });\r\n    }, []);\r\n    const mapRef = React.useRef();\r\n    const onMapLoad = React.useCallback((map) => {\r\n      mapRef.current = map;\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n        panTo({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n          zoom: 14,\r\n        });\r\n      }, () => null);\r\n    }, [panTo]);\r\n    const {isLoaded, loadError} = useLoadScript({\r\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n      libraries,\r\n    })\r\n    if (loadError) return \"Error loading maps\";\r\n    if (!isLoaded) return \"Loading Maps\";\r\n    \r\n    return (\r\n      <div>\r\n        <img className={styles.logo} src=\"/logo.svg\" alt=\"\" />\r\n        <h1 className={styles.appName}>Spatium</h1>\r\n        <Search panTo={panTo} />\r\n        <Locate panTo={panTo} />\r\n        <div className={styles.distance}>\r\n          Distance: {distance.toFixed(2)} km.\r\n        </div>\r\n        <div className={styles.averageElevation}>\r\n          Average Elevation: {averageElevation.toFixed(2)} m.\r\n        </div>\r\n        <div className={styles.minElevation}>\r\n          Min. Elevation: {minElevation === Infinity ? ((0).toFixed(2)) : (minElevation.toFixed(2))} m.\r\n        </div>\r\n        <div className={styles.maxElevation}>\r\n          Max. Elevation: {maxElevation === -Infinity ? ((0).toFixed(2)) : (maxElevation.toFixed(2))} m.\r\n        </div>\r\n        <GoogleMap \r\n          mapContainerStyle={mapContainerStyle}\r\n          zoom={2.5}\r\n          center={mapCenter}\r\n          options={options}\r\n          onClick={onMapClick}\r\n          onLoad={onMapLoad}\r\n        >\r\n          { pencil &&\r\n            <Marker\r\n              position={{ lat: pencil.lat, lng: pencil.lng }}\r\n              icon={{\r\n                url: \"/pencil.svg\",\r\n                scaledSize: new window.google.maps.Size(30, 30),\r\n                origin: new window.google.maps.Point(0,0),\r\n                anchor: new window.google.maps.Point(15,15),\r\n              }}\r\n              draggable={true}\r\n              \r\n              onDrag={(event) => {\r\n                setPencil({\r\n                  lat: event.latLng.lat(),\r\n                  lng: event.latLng.lng(),\r\n                });\r\n                var point = { lat: event.latLng.lat(), lng: event.latLng.lng(), elevation: 0 }\r\n                var elevator = new window.google.maps.ElevationService();\r\n                elevator.getElevationForLocations({\r\n                  'locations': [{ lat: point.lat, lng: point.lng }]\r\n                }, function(results, status) {\r\n                  if (status === 'OK') {\r\n                        var retrived_elevation = results[0].elevation;\r\n                        if (retrived_elevation > 0) {\r\n                          point.elevation = retrived_elevation;\r\n                          if (retrived_elevation > maxElevation) dispatch(setMaxElevation(retrived_elevation));\r\n                          else if (retrived_elevation < minElevation) dispatch(setMinElevation(retrived_elevation));\r\n                        } else point.elevation = 0;\r\n                  } else {\r\n                    console.log('Elevation service failed due to: ' + status);\r\n                    point.elevation = 0;\r\n                  }\r\n                });\r\n\r\n                var currentPoints = [...points];\r\n                currentPoints.push(point);\r\n                setPoints(currentPoints);\r\n                if (points.length > 1) {\r\n                  var newDistance = distance + calculate_distance(currentPoints[currentPoints.length-2], currentPoints[currentPoints.length-1]);\r\n                  dispatch(setDistance(newDistance));\r\n                  var newElevation = 0\r\n                  for (var i = 0; i < points.length; i++) {\r\n                    newElevation += points[i].elevation;\r\n                  }\r\n                  newElevation = newElevation / points.length;\r\n                  dispatch(setAverageElevation(newElevation));\r\n                }\r\n              }}\r\n            />\r\n          }\r\n          <Polyline path={points} options={{ strokeOpacity: 0.8, strokeColor: \"#3266A8\", fillColor:\"#3266A8\"}} />  \r\n        </GoogleMap>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction Locate({panTo}) {\r\n  return (\r\n    <button className={styles.locate} onClick={() => {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n        panTo({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n          zoom: 14,\r\n        });\r\n      }, () => null);\r\n    }}>\r\n      <img src=\"/compass.svg\" alt=\"compass - locate me\" />\r\n    </button>\r\n  )\r\n}\r\n\r\nfunction Search({panTo}) {\r\n  const {\r\n    ready, \r\n    value, \r\n    suggestions: {status, data}, \r\n    setValue, \r\n    clearSuggestions\r\n  } = usePlacesAutocomplete({\r\n    requestOptions: {\r\n      location: { lat: () => 43.653225, lng: () => -79.383186 },\r\n      radius: 200 * 1000,\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className={styles.search}>\r\n      <Combobox \r\n        onSelect={async (address) => {\r\n          setValue(address, false);\r\n          clearSuggestions();\r\n          try {\r\n            const results = await getGeocode({ address });\r\n            const { lat, lng } = await getLatLng(results[0]);\r\n            panTo({ lat, lng, zoom: 14})\r\n          } catch(error) {\r\n            console.log(\"error!\")\r\n          }\r\n        }}\r\n      >\r\n        <ComboboxInput \r\n          value={value} \r\n          onChange={(e) => {\r\n            setValue(e.target.value);\r\n          }} \r\n          disabled={!ready}\r\n          placeholder=\"Enter an address\"\r\n        />\r\n        <ComboboxPopover>\r\n          <ComboboxList>\r\n            {status === \"OK\" && \r\n              data.map(({id, description}) => (\r\n              <ComboboxOption key={id} value={description} />\r\n              ))}\r\n          </ComboboxList>\r\n        </ComboboxPopover>\r\n      </Combobox>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Map } from './features/map/Map';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Map />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport mapReducer from '../features/map/mapSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    map: mapReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"averageElevation\":\"Map_averageElevation__3cfzc\",\"minElevation\":\"Map_minElevation__14XMx\",\"maxElevation\":\"Map_maxElevation__ZmXBY\",\"distance\":\"Map_distance__2qQCE\",\"search\":\"Map_search__2QBuO\",\"logo\":\"Map_logo__E2v3q\",\"appName\":\"Map_appName__2eQEX\",\"locate\":\"Map_locate__1OiBK\"};"],"sourceRoot":""}